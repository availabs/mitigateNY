import React, {useEffect, useMemo, useState} from "react";
import get from "lodash/get";
import {useFalcor} from '~/modules/avl-falcor';
import {pgEnv} from "~/utils/";
import {isJson} from "~/utils/macros.jsx";
import VersionSelectorSearchable from "../shared/versionSelector/searchable.jsx";
import GeographySearch from "../shared/geographySearch.jsx";
import {Loading} from "~/utils/loading.jsx";
import {metaData} from "./config.js";
import {ButtonSelector} from "../shared/buttonSelector.jsx";
import {RenderColorPicker} from "../shared/colorPicker.jsx";
import {scaleThreshold} from "d3-scale";
import {getColorRange} from "~/pages/DataManager/utils/color-ranges.js";
import ckmeans from '~/utils/ckmeans';
import {RenderMap} from "../shared/Map/RenderMap.jsx";
import {HazardSelectorSimple} from "../shared/HazardSelector/hazardSelectorSimple.jsx";
import {hazardsMeta} from "~/utils/colors.jsx";
import {Attribution} from "../shared/attribution.jsx";
import {EditMap, ViewMap} from "../shared/TemplateMap/index.jsx";

const getDomain = (data = [], range = []) => {
    if (!data?.length || !range?.length) return [];
    return data?.length && range?.length ? ckmeans(data, Math.min(data?.length, range?.length)) : [];
}
const getColorScale = (data, colors) => {
    const domain = getDomain(data, colors)

    return scaleThreshold()
        .domain(domain)
        .range(colors);
}
const getGeoColors = ({geoid, data = [], columns = [], geoAttribute, paintFn, colors = [], ...rest}) => {
    if (!data?.length || !colors?.length) return {};

    const geoids = data.map(d => d[geoAttribute]);
    const stateFips = (geoid?.substring(0, 2) || geoids[0] || '00')?.substring(0, 2);
    const geoColors = {}
    const geoLayer = geoids[0]?.toString().length === 5 ? 'counties' : 'tracts';
    const colorScale = getColorScale(
        data.map((d) => paintFn ? paintFn(d) : +d[columns?.[0]]).filter(d => d),
        colors
    );
    const domain = getDomain(
        data.map((d) => paintFn ? paintFn(d) : +d[columns?.[0]]).filter(d => d && d >= 0),
        colors
    )
    data.forEach(record => {
        const value = paintFn ? paintFn(record) : +record[columns?.[0]];
        geoColors[record[geoAttribute]] = value ? colorScale(value) : '#d0d0ce';
    })
    return {geoColors, domain, geoLayer};
}

async function getData({geoAttribute, geoid, version, attribute, colors, title, dataSource, size, height}, falcor) {
    const stateView = 285; // need to pull this based on categories
    const countyView = 286;

    const options = JSON.stringify({
        filter: {...geoAttribute && {[`substring(${geoAttribute}::text, 1, ${geoid?.toString()?.length})`]: [geoid]}},
    });
    const lenPath = ['dama', pgEnv, 'viewsbyId', version, 'options', options, 'length'];
    const dataPath = ['dama', pgEnv, 'viewsbyId', version, 'options', options, 'databyIndex'];

    const attributionPath = ['dama', pgEnv, 'views', 'byId', version, 'attributes'],
        attributionAttributes = ['source_id', 'view_id', 'version', '_modified_timestamp'];

    await falcor.get(lenPath);
    const len = get(falcor.getCache(), lenPath, 0);

    await falcor.get([...dataPath, {from: 0, to: len - 1}, [geoAttribute, attribute]]);
    await falcor.get([...attributionPath, attributionAttributes]);
    const data = Object.values(get(falcor.getCache(), dataPath, {}));


    // mapFocus
    const geomColTransform = [`st_asgeojson(st_envelope(ST_Simplify(geom, ${geoid?.toString()?.length === 5 ? `0.1` : `0.5`})), 9, 1) as geom`],
        geoIndices = {from: 0, to: 0},
        stateFips = get(data, [0, 'geoid']) || geoid?.toString()?.substring(0, 2),
        geoPath = (view_id) =>
            ['dama', pgEnv, 'viewsbyId', view_id,
                'options', JSON.stringify({
                filter: {
                    geoid: [geoid?.toString()?.length >= 5 ? geoid : stateFips.substring(0, 2)]
                }}),
                'databyIndex'
            ];
    const geomRes = await falcor.get([...geoPath(geoid?.toString()?.length === 5 ? countyView : stateView), geoIndices, geomColTransform]);
    const geom = get(geomRes, ["json", ...geoPath(geoid?.toString()?.length === 5 ? countyView : stateView), 0, geomColTransform]);
    const mapFocus = get(JSON.parse(geom), 'bbox');

    const attributionData = get(falcor.getCache(), attributionPath, {});

    const {geoColors, domain, geoLayer} =
        getGeoColors({geoid: geoid?.toString(), data, columns: [attribute], geoAttribute, colors});

    const layerProps = {
        ccl: {
            data,
                geoColors: geoColors,
                domain: domain,
                mapFocus: mapFocus,
                colors,
                title,
                attribute,
                geoAttribute,
                dataSource,
                version,
                geoLayer: geoLayer,
                height,
                size
        }
    }

    return {
        data,
        geoAttribute,
        geoid,
        version,
        attribute,
        colors,
        mapFocus,
        attributionData,
        geoColors,
        domain,
        geoLayer,
        layerProps,
        title,
        dataSource,
        size,
        height
    }
}

const Edit = ({value, onChange, size}) => {

    const {falcor, falcorCache} = useFalcor();

    let cachedData = value && isJson(value) ? JSON.parse(value) : {};
    const baseUrl = '/';

    const [dataSources, setDataSources] = useState(cachedData?.dataSources || []);
    const [dataSource, setDataSource] = useState(cachedData?.dataSource);
    const [version, setVersion] = useState(cachedData?.version);

    const [attribute, setAttribute] = useState(cachedData?.attribute);
    const [geoAttribute, setGeoAttribute] = useState(cachedData?.geoAttribute);


    const [loading, setLoading] = useState(true);
    const [status, setStatus] = useState(cachedData?.status);
    const [geoid, setGeoid] = useState(cachedData?.geoid || '36');
    const [data, setData] = useState(cachedData?.data);
    const [numColors, setNumColors] = useState(cachedData?.numColors || 5);
    const [shade, setShade] = useState(cachedData?.shade || 'Oranges');
    const [colors, setColors] = useState(cachedData?.colors || getColorRange(5, "Oranges", false));
    const [title, setTitle] = useState(cachedData?.title);
    const [height, setHeight] = useState(cachedData?.height || 500);

    const category = 'Social Vulnerability';
    const dataSourceByCategoryPath = ['dama', pgEnv, 'sources', 'byCategory', category];

    useEffect(() => {
        async function getData() {
            setLoading(true);
            setStatus(undefined);

            // fetch data sources from categories that match passed prop
            await falcor.get(dataSourceByCategoryPath);
            setDataSources(get(falcor.getCache(), [...dataSourceByCategoryPath, 'value'], []))
            // fetch columns, data

            setLoading(false);

        }

        getData()
    }, []);

    useEffect(() => {
        const geoAttribute =
            (
                dataSources.find(ds => ds.source_id === dataSource)?.metadata?.columns  ||
                dataSources.find(ds => ds.source_id === dataSource)?.metadata ||
                [])
                .find(c => c.display === 'geoid-variable');
        geoAttribute?.name && setGeoAttribute(geoAttribute?.name);
    }, [dataSources, dataSource]);
    useEffect(() => {

        async function load(){
            if(!geoid || !attribute || !geoAttribute || !version || !dataSource) {
                !dataSource && setStatus('Please select a Datasource.');
                !version && setStatus('Please select a version.');
                !geoAttribute?.length && setStatus('No geo attribute found.');
                !attribute?.length && setStatus('Please select columns.');
                !geoid && setStatus('Please Select a Geography.');
                setLoading(false);
                return;
            }

            setLoading(true);
            setStatus(undefined);

            const data = await getData({
                geoAttribute, geoid, version, attribute, colors, title, dataSource, size, height
            }, falcor);

            onChange(JSON.stringify({
                ...data,
            }));

            setLoading(false);
        }

        load()
    }, [dataSource, version, geoAttribute, attribute, geoid, title, dataSource, size, height]);

    useEffect(() => {
        setTitle(
            (
                dataSources.find(ds => ds.source_id === dataSource)?.metadata?.columns  ||
                dataSources.find(ds => ds.source_id === dataSource)?.metadata ||
                []).find(ds => ds.name === attribute)?.display_name || attribute
        )
    }, [dataSources, dataSource, attribute])


    return (
        <div className='w-full'>
            <div className='relative'>
                <div className={'border rounded-md border-blue-500 bg-blue-50 p-2 m-1'}>
                    Edit Controls
                    <ButtonSelector
                        label={'Data Source:'}
                        types={dataSources.map(ds => ({label: ds.name, value: ds.source_id}))}
                        type={dataSource}
                        setType={e => {
                            setAttribute(undefined);
                            setGeoAttribute(undefined);
                            setVersion(undefined);
                            setData([]);

                            setDataSource(e);
                        }}
                    />
                    <VersionSelectorSearchable
                        source_id={dataSource}
                        view_id={version}
                        onChange={setVersion}
                        className={'flex-row-reverse'}
                    />
                    <GeographySearch value={geoid} onChange={setGeoid} className={'flex-row-reverse'}/>

                    <div className={`flex justify-between`}>
                        <label
                            className={`shrink-0 pr-2 py-1 my-1 w-1/4`}
                        >
                            Attribute:
                        </label>
                        <select
                            className={`bg-white w-full pl-3 rounded-md my-1`}
                            value={attribute}
                            onChange={e => setAttribute(e.target.value)}
                        >
                            <option value={undefined} key={''}>Please select an attribute</option>
                            {
                                (
                                    dataSources.find(ds => ds.source_id === dataSource)?.metadata?.columns  ||
                                    dataSources.find(ds => ds.source_id === dataSource)?.metadata ||
                                    [])
                                    .filter(c => ['data-variable', 'meta-variable'].includes(c.display))
                                    .map(c => <option  value={c.name} key={c.name}>{c.display_name || c.name}</option>)
                            }
                        </select>
                    </div>
                    <RenderColorPicker
                        title={'Colors: '}
                        numColors={numColors}
                        setNumColors={setNumColors}
                        shade={shade}
                        setShade={setShade}
                        colors={colors}
                        setColors={setColors}
                    />
                    <ButtonSelector
                        label={'Size:'}
                        types={[{label: 'Small', value: 500}, {label: 'Medium', value: 700}, {
                            label: 'Large',
                            value: 900
                        }]}
                        type={height}
                        setType={e => {
                            setHeight(e)
                        }}
                    />
                </div>
                {
                    loading ? <Loading/> :
                        status ? <div className={'p-5 text-center'}>{status}</div> :
                            <React.Fragment>
                                <div className={`flex-none w-full p-1`} style={{height: `${height}px`}}>
                                    <RenderMap
                                        interactive={true}
                                        falcor={falcor}
                                        layerProps={cachedData.layerProps}
                                        legend={{domain: cachedData.domain, range: colors, title, size}}
                                        layers={['Choropleth']}
                                    />
                                </div>
                                <Attribution baseUrl={baseUrl} attributionData={cachedData.attributionData}/>
                            </React.Fragment>
                }
            </div>
        </div>
    )
}

Edit.settings = {
    hasControls: true,
    name: 'ElementEdit'
}

const View = ({value}) => {
    if (!value) return ''

    let data = typeof value === 'object' ?
        value['element-data'] :
        JSON.parse(value)
    const baseUrl = '/';
    const attributionData = data?.attributionData;
    console.log('data?', data)
    return (
        <div className='relative w-full p-6'>
            {
                data.img  ?
                    <div className='h-80vh flex-1 flex flex-col'>
                        <img alt='Choroplath Map' src={get(data, ['img'])}/>
                    </div> :
                    <div className={`flex-none w-full p-1`} style={{height: `${data.height}px`}}>
                        <RenderMap
                            interactive={false}
                            layerProps={data.layerProps}
                            legend={{
                                size: data.size,
                                domain: data?.domain || [],
                                range: data.colors,
                                title: data.title,
                                show: data.showLegend
                            }}
                        />
                    </div>

            }
            <Attribution baseUrl={baseUrl} attributionData={attributionData}/>
        </div>
    )
}


export default {
    "name": 'Map: Social Vulnerability',
    "type": 'Map1',
    "variables": [
        {
            name: 'geoid',
            default: '36',
        },
        {
            name: 'dataSources',
            hidden: true
        },
        {
            name: 'dataSource',
            hidden: true
        },
        {
            name: 'version',
            hidden: true
        },
        {
            name: 'geoAttribute',
            hidden: true
        },
        {
            name: 'attribute',
            hidden: true
        },
        {
            name: 'title',
            hidden: true
        },
        {
            name: 'dataSource',
            hidden: true
        },
        {
            name: 'size',
            hidden: true
        },
        {
            name: 'height',
            hidden: true
        },
        {
            name: 'colors',
            hidden: true,
            default: getColorRange(5, "Oranges", false)
        }
    ],
    getData,
    "EditComp": Edit,
    "ViewComp": View
}